/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.19.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * PexelsV1alpha1Api - axios parameter creator
 * @export
 */
export const PexelsV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint enables you to receive real-time photos curated by the Pexels team.
         * @param {number} [page] The page number you are requesting. Default: 1
         * @param {number} [perPage] The number of results you are requesting per page.Default: 15, Max: 80
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        curatedPexPhotos: async (page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/pexels.halo.run/v1alpha1/photos/-/curate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search photos for pexels
         * @param {number} [page] The page number you are requesting. Default: 1
         * @param {number} [perPage] The number of results you are requesting per page.Default: 15, Max: 80
         * @param {string} [query] The search query. Ocean, Tigers, Pears, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPexPhotos: async (page?: number, perPage?: number, query?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/pexels.halo.run/v1alpha1/photos/-/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PexelsV1alpha1Api - functional programming interface
 * @export
 */
export const PexelsV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PexelsV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint enables you to receive real-time photos curated by the Pexels team.
         * @param {number} [page] The page number you are requesting. Default: 1
         * @param {number} [perPage] The number of results you are requesting per page.Default: 15, Max: 80
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async curatedPexPhotos(page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.curatedPexPhotos(page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PexelsV1alpha1Api.curatedPexPhotos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search photos for pexels
         * @param {number} [page] The page number you are requesting. Default: 1
         * @param {number} [perPage] The number of results you are requesting per page.Default: 15, Max: 80
         * @param {string} [query] The search query. Ocean, Tigers, Pears, etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPexPhotos(page?: number, perPage?: number, query?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPexPhotos(page, perPage, query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PexelsV1alpha1Api.searchPexPhotos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PexelsV1alpha1Api - factory interface
 * @export
 */
export const PexelsV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PexelsV1alpha1ApiFp(configuration)
    return {
        /**
         * This endpoint enables you to receive real-time photos curated by the Pexels team.
         * @param {PexelsV1alpha1ApiCuratedPexPhotosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        curatedPexPhotos(requestParameters: PexelsV1alpha1ApiCuratedPexPhotosRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.curatedPexPhotos(requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Search photos for pexels
         * @param {PexelsV1alpha1ApiSearchPexPhotosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPexPhotos(requestParameters: PexelsV1alpha1ApiSearchPexPhotosRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.searchPexPhotos(requestParameters.page, requestParameters.perPage, requestParameters.query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for curatedPexPhotos operation in PexelsV1alpha1Api.
 * @export
 * @interface PexelsV1alpha1ApiCuratedPexPhotosRequest
 */
export interface PexelsV1alpha1ApiCuratedPexPhotosRequest {
    /**
     * The page number you are requesting. Default: 1
     * @type {number}
     * @memberof PexelsV1alpha1ApiCuratedPexPhotos
     */
    readonly page?: number

    /**
     * The number of results you are requesting per page.Default: 15, Max: 80
     * @type {number}
     * @memberof PexelsV1alpha1ApiCuratedPexPhotos
     */
    readonly perPage?: number
}

/**
 * Request parameters for searchPexPhotos operation in PexelsV1alpha1Api.
 * @export
 * @interface PexelsV1alpha1ApiSearchPexPhotosRequest
 */
export interface PexelsV1alpha1ApiSearchPexPhotosRequest {
    /**
     * The page number you are requesting. Default: 1
     * @type {number}
     * @memberof PexelsV1alpha1ApiSearchPexPhotos
     */
    readonly page?: number

    /**
     * The number of results you are requesting per page.Default: 15, Max: 80
     * @type {number}
     * @memberof PexelsV1alpha1ApiSearchPexPhotos
     */
    readonly perPage?: number

    /**
     * The search query. Ocean, Tigers, Pears, etc.
     * @type {string}
     * @memberof PexelsV1alpha1ApiSearchPexPhotos
     */
    readonly query?: string
}

/**
 * PexelsV1alpha1Api - object-oriented interface
 * @export
 * @class PexelsV1alpha1Api
 * @extends {BaseAPI}
 */
export class PexelsV1alpha1Api extends BaseAPI {
    /**
     * This endpoint enables you to receive real-time photos curated by the Pexels team.
     * @param {PexelsV1alpha1ApiCuratedPexPhotosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PexelsV1alpha1Api
     */
    public curatedPexPhotos(requestParameters: PexelsV1alpha1ApiCuratedPexPhotosRequest = {}, options?: RawAxiosRequestConfig) {
        return PexelsV1alpha1ApiFp(this.configuration).curatedPexPhotos(requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search photos for pexels
     * @param {PexelsV1alpha1ApiSearchPexPhotosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PexelsV1alpha1Api
     */
    public searchPexPhotos(requestParameters: PexelsV1alpha1ApiSearchPexPhotosRequest = {}, options?: RawAxiosRequestConfig) {
        return PexelsV1alpha1ApiFp(this.configuration).searchPexPhotos(requestParameters.page, requestParameters.perPage, requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
}

